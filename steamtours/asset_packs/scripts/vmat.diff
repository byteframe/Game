3a4,5
> # Copyright (c) 201X OtherPeople(?)
> # Copyright (c) 2022 byteframe
24c26
< # python vmt_to_vmat.py MODNAME OPTIONAL_PATH_TO_FOLDER
---
> # python vmt_to_vmat.py DIR
34d35
< # What shader to use.
36d36
< # File format of the textures.
38d37
< # substring added after an alpha map's name, but before the extension
40,44c39
< # this leads to the root of the game folder, i.e. dota 2 beta/content/dota_addons/, make sure to remember the final slash!!
< PATH_TO_GAME_CONTENT_ROOT = ""
< PATH_TO_CONTENT_ROOT = ""
< # Set this to True if you wish to overwrite your old vmat files
< OVERWRITE_VMAT = True
---
> OVERWRITE_VMAT = False
45a41
> current_file = ''
98a95,105
>     # zps crutch
>     val = val.replace('models//', 'models/')
>     val = val.replace('deadcity//', 'deadcity/')
>     val = val.replace('deadcity_unique//', 'deadcity_unique/')
>     val = val.replace('swamp//', 'swamp/')
>     val = val.replace('tools//', 'tools/')
>     val = val.replace('clubzombo//', 'clubzombo/')
>     # seens in a few textures in neotokyosource
>     val = val.replace('materials//', 'materials/')
>     val = val.replace('=', ' ')
>     val = val.replace('\t', ' ')
102c109
<         print("+ No value found, moving on")
---
>         # print("+ No value found, moving on")
107a115,121
>     retPath = retPath.replace(' ', '_')
>     retPath = retPath.replace('//', '/')
>     retPath = retPath.replace('.vmt', '')
>     # this was for contagion, it might have fixed it before left4dead fuck up
>     retPath = re.sub('\t', '  ', retPath)
>     # retPath = re.sub('[/\\\]+360', '/', retPath)
>     # retPath = re.sub('[\s_]*\[\$.*\]', '', retPath)
117a132
>     localPath = localPath.replace(' ', '_')
120,121c135,137
<     print("+ Attempting to extract alpha from " + image_path)
<     if path.exists(image_path):
---
>     image_path = image_path.replace('\\', '/')
>     mask_path = mask_path.replace('\\', '/')
>     if path.lexists(image_path):
144a161,162
>     else:
>       print("NO ALPHA: " + current_file + " : " + image_path)
145a164
>     localPath = localPath.replace(' ', '_')
147c166,167
<     if path.exists(image_path):
---
>     image_path = image_path.replace('\\', '/')
>     if path.lexists(image_path):
156,159d175
< #flipNormalMap("materials/models/player/demo/demoman_normal.tga")
< 
< #extractAlphaTextures("materials/models/bots/boss_bot/carrier_body.tga")
< 
167c183
<         'basetexture2': ('TextureLayer1Color', fixTexturePath, None),
---
>         'basetexture2': ('TextureLayer1Color', fixTexturePath, '\tF_BLEND 1\n'),
168a185,186
>         'bumpmap2': ('TextureLayer1Normal', fixTexturePath, '\tF_BLEND_NORMALS 1\n'),
>         'blendmodulatetexture': ('TextureLayer1RevealMask', fixTexturePath, None),
216,225c234,237
< ###
< ### Main Execution
< ###
< 
< globalVars = text_parser("global_vars.txt", " = ")
< PATH_TO_GAME_CONTENT_ROOT = globalVars["gameContentRoot"]
< PATH_TO_CONTENT_ROOT = PATH_TO_GAME_CONTENT_ROOT + sys.argv[1] + "/"
< print(PATH_TO_CONTENT_ROOT)
< if(PATH_TO_GAME_CONTENT_ROOT == ""):
<     print("ERROR: Please open vmt_to_vmat in your favorite text editor, and modify PATH_TO_GAME_CONTENT_ROOT to lead to your games content files (i.e. ...\steamvr_environments\content\steamtours_addons\)")
---
> PATH_TO_CONTENT_ROOT = sys.argv[1] + "/"
> globalVars = text_parser(PATH_TO_CONTENT_ROOT + "global_vars.txt", " = ")
> if(PATH_TO_CONTENT_ROOT == ""):
>     print("ERROR: Please open vmt_to_vmat in your favorite text editor, and modify PATH_TO_CONTENT_ROOT to lead to your games content files (i.e. ...\steamvr_environments\content\steamtours_addons\)")
227,228c239
< print('Source 2 Material Conveter! By Rectus via Github.')
< print('Initially forked by Alpyne, this version by caseytube.')
---
> print('Source 2 Material Converter! By Rectus via Github.')
244d254
<     print(PATH_TO_CONTENT_ROOT)
258,259c268,269
<     print('--------------------------------------------------------------------------------------------------------')
<     print('+ Loading File:\n' + fileName)
---
>     current_file = fileName.replace(PATH_TO_CONTENT_ROOT, '')
>     # print(current_file)
292c302
<         patchFile = vmtParameters["include"].replace('"', '').replace("'", '');
---
>         patchFile = vmtParameters["include"].replace('"', '').replace("'", '').replace("\\", "/");
294,301c304,315
<         with open(PATH_TO_CONTENT_ROOT + patchFile, 'r') as vmtFile:
<             for line in vmtFile.readlines():
<                 if any(wd in line.lower() for wd in materialTypes):
<                     validPatch = True
<                 parseVMTParameter(line, vmtParameters)
<         if not validPatch:
<             print("+ Patch file is not a valid material. Skipping!")
<             continue
---
>         refFile = PATH_TO_CONTENT_ROOT + patchFile
>         if not os.path.lexists(refFile):
>           refFile = PATH_TO_CONTENT_ROOT + "../../asset_pack_hl2/" + patchFile
>         if os.path.lexists(refFile):
>           with open(refFile, 'r') as vmtFile:
>               for line in vmtFile.readlines():
>                   if any(wd in line.lower() for wd in materialTypes):
>                       validPatch = True
>                   parseVMTParameter(line, vmtParameters)
>           if not validPatch:
>               print("+ Patch file is not a valid material. Skipping!")
>               continue
305,306c319,320
<         if os.path.exists(vmatFileName) and not OVERWRITE_VMAT:
<             print('+ File already exists. Skipping!')
---
>         if os.path.lexists(vmatFileName) and not OVERWRITE_VMAT:
>             # print('+ File already exists. Skipping!')
309c323
<         print('+ Converting ' + os.path.basename(fileName))
---
>         # print('+ Converting ' + os.path.basename(fileName))
323c337
<                         print("selfillum")
---
>                         # print("selfillum")
332c346,348
<                     basetexturePath = val.lower().strip().replace('.vtf', '')
---
>                     basetexturePath = val.lower().strip().replace('.vtf', '').replace('.vmt', '')
>                     # basetexturePath = re.sub('[/\\\]+360', '/', basetexturePath)
>                     # basetexturePath = re.sub('[\s_]*\[\$.*\]', '', basetexturePath)
334c350,352
<                     bumpmapPath = val.lower().strip().replace('.vtf', '')
---
>                     bumpmapPath = val.lower().strip().replace('.vtf', '').replace('.vmt', '')
>                     # bumpmapPath = re.sub('[/\\\]+360', '/', bumpmapPath)
>                     # bumpmapPath = re.sub('[\s_]*\[\$.*\]', '', bumpmapPath)
352c370
<                 extractAlphaTextures("materials/" + basetexturePath.replace('"', '') + TEXTURE_FILEEXT, False)
---
>                 extractAlphaTextures("materials/" + basetexturePath.replace("\\", '/').replace('"', '') + TEXTURE_FILEEXT, False)
355c373
<                 extractAlphaTextures("materials/" + basetexturePath.replace('"', '') + TEXTURE_FILEEXT, False)
---
>                 extractAlphaTextures("materials/" + basetexturePath.replace("\\", '/').replace('"', '') + TEXTURE_FILEEXT, False)
401c419
<     if not os.path.exists(bumpmapConvertedList):
---
>     if not os.path.lexists(bumpmapConvertedList):
407d424
<         print("Checking if normal file " + bumpmapPath + " has been converted")
419a437
> sys.exit()
433,435c451
< 	# TextureSelfIllumMask "path/to/tex/basetexture_alpha.tga"
< 
< # input("\nDone, press ENTER to continue...")
\ No newline at end of file
---
> 	# TextureSelfIllumMask "path/to/tex/basetexture_alpha.tga"
\ No newline at end of file
